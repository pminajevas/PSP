/*
 * PoS
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Tax : IEquatable<Tax>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets TaxName
        /// </summary>

        [DataMember(Name="taxName")]
        public string TaxName { get; set; }

        /// <summary>
        /// Gets or Sets TaxDescription
        /// </summary>

        [DataMember(Name="taxDescription")]
        public string TaxDescription { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>

        [DataMember(Name="value")]
        public double? Value { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum FlatEnum for Flat
            /// </summary>
            [EnumMember(Value = "Flat")]
            FlatEnum = 0,
            /// <summary>
            /// Enum PercentEnum for Percent
            /// </summary>
            [EnumMember(Value = "Percent")]
            PercentEnum = 1        }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>

        [DataMember(Name="category")]
        public CategoryEnum? Category { get; set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>

        [DataMember(Name="validFrom")]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// Gets or Sets ValidUntil
        /// </summary>

        [DataMember(Name="validUntil")]
        public DateTime? ValidUntil { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tax {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TaxName: ").Append(TaxName).Append("\n");
            sb.Append("  TaxDescription: ").Append(TaxDescription).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Tax)obj);
        }

        /// <summary>
        /// Returns true if Tax instances are equal
        /// </summary>
        /// <param name="other">Instance of Tax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tax other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    TaxName == other.TaxName ||
                    TaxName != null &&
                    TaxName.Equals(other.TaxName)
                ) && 
                (
                    TaxDescription == other.TaxDescription ||
                    TaxDescription != null &&
                    TaxDescription.Equals(other.TaxDescription)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    ValidFrom == other.ValidFrom ||
                    ValidFrom != null &&
                    ValidFrom.Equals(other.ValidFrom)
                ) && 
                (
                    ValidUntil == other.ValidUntil ||
                    ValidUntil != null &&
                    ValidUntil.Equals(other.ValidUntil)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (TaxName != null)
                    hashCode = hashCode * 59 + TaxName.GetHashCode();
                    if (TaxDescription != null)
                    hashCode = hashCode * 59 + TaxDescription.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (ValidFrom != null)
                    hashCode = hashCode * 59 + ValidFrom.GetHashCode();
                    if (ValidUntil != null)
                    hashCode = hashCode * 59 + ValidUntil.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Tax left, Tax right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Tax left, Tax right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
